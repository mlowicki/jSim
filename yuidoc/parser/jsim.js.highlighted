<div class="highlight"><pre><span class="cm">/**</span>
<span class="cm"> * Core functionality.</span>
<span class="cm"> * @module core</span>
<span class="cm"> */</span>

<span class="cm">/**</span>
<span class="cm"> * Global namespace.</span>
<span class="cm"> * @class jSim</span>
<span class="cm"> * @static</span>
<span class="cm"> */</span>
<span class="nx">jSim</span> <span class="o">=</span> <span class="p">{};</span>

<span class="cm">/**</span>
<span class="cm"> * Manage list of actions.</span>
<span class="cm"> * @class Scene</span>
<span class="cm"> * @constructor</span>
<span class="cm"> * @param {Object} cfg</span>
<span class="cm"> */</span>
<span class="nx">jSim</span><span class="p">.</span><span class="nx">Scene</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">cfg</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="k">this</span> <span class="o">===</span> <span class="nb">window</span><span class="p">)</span> <span class="k">return</span> <span class="k">new</span> <span class="nx">jSim</span><span class="p">.</span><span class="nx">Scene</span><span class="p">(</span><span class="nx">cfg</span><span class="p">);</span>

    <span class="k">this</span><span class="p">.</span><span class="nx">_name</span> <span class="o">=</span> <span class="nx">cfg</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">_components</span> <span class="o">=</span> <span class="p">[];</span>
   
    <span class="c1">// remember each action. </span>
    <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">len</span> <span class="o">=</span> <span class="nx">cfg</span><span class="p">.</span><span class="nx">actions</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">len</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">item</span> <span class="o">=</span> <span class="nx">cfg</span><span class="p">.</span><span class="nx">actions</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
        <span class="c1">// each action must implement Action interface.</span>
        <span class="nx">jSim</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">Interface</span><span class="p">.</span><span class="nx">ensureImplements</span><span class="p">(</span><span class="nx">item</span><span class="p">,</span> <span class="nx">jSim</span><span class="p">.</span><span class="nx">Action</span><span class="p">);</span> 
        <span class="k">this</span><span class="p">.</span><span class="nx">_components</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">item</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="nx">jSim</span><span class="p">.</span><span class="nx">Scene</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="p">{</span>
    <span class="cm">/**</span>
<span class="cm">     * Run actions from the particular index or 0 by default.</span>
<span class="cm">     * @method start</span>
<span class="cm">     * param {Number} index (optional)</span>
<span class="cm">     */</span>
    <span class="nx">start</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">index</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">index</span> <span class="o">===</span> <span class="kc">undefined</span><span class="p">)</span> <span class="p">{</span> <span class="nx">index</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">index</span> <span class="o">&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">_components</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">this</span><span class="p">.</span><span class="nx">_components</span><span class="p">[</span><span class="nx">index</span><span class="p">].</span><span class="nx">onEnd</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span> <span class="c1">// remove all previous callbacks.</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">index</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">_components</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">_components</span><span class="p">[</span><span class="nx">index</span><span class="p">].</span><span class="nx">onEnd</span><span class="p">({</span>
                <span class="nx">fn</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">start</span><span class="p">,</span>
                <span class="nx">scope</span><span class="o">:</span> <span class="k">this</span><span class="p">,</span>
                <span class="nx">args</span><span class="o">:</span> <span class="p">[</span><span class="nx">index</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span>
            <span class="p">});</span>
        <span class="p">}</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_components</span><span class="p">[</span><span class="nx">index</span><span class="p">].</span><span class="nx">next</span><span class="p">();</span>
    <span class="p">},</span>
    <span class="cm">/**</span>
<span class="cm">     * Stop all actions for the scene.</span>
<span class="cm">     * @method</span>
<span class="cm">     */</span>
    <span class="nx">stop</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Not implemented&#39;</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="cm">/**</span>
<span class="cm"> * Mouse manager.</span>
<span class="cm"> * @class Mouse</span>
<span class="cm"> * @constructor</span>
<span class="cm"> */</span>
<span class="nx">jSim</span><span class="p">.</span><span class="nx">Mouse</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">cfg</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// create and position mouse cursor.</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">_x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">_y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">_el</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">);</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">_el</span><span class="p">.</span><span class="nx">className</span> <span class="o">=</span> <span class="s1">&#39;jsim-mouse&#39;</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">_el</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">top</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">_y</span> <span class="o">+</span> <span class="s1">&#39;px&#39;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">_el</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">left</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">_x</span> <span class="o">+</span> <span class="s1">&#39;px&#39;</span><span class="p">;</span>
    <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_el</span><span class="p">);</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">_onEnd</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">jSim</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">Observer</span><span class="p">;</span>
<span class="p">};</span>

<span class="nx">jSim</span><span class="p">.</span><span class="nx">Mouse</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="p">{</span>
    <span class="cm">/**</span>
<span class="cm">     * Default widget of the node.</span>
<span class="cm">     * @property WIDTH</span>
<span class="cm">     * @type number</span>
<span class="cm">     */</span>
    <span class="nx">WIDTH</span><span class="o">:</span> <span class="mi">16</span><span class="p">,</span>
    <span class="cm">/**</span>
<span class="cm">     * Default height of the node.</span>
<span class="cm">     * @property HEIGHT</span>
<span class="cm">     * @type number</span>
<span class="cm">     */</span>
    <span class="nx">HEIGHT</span><span class="o">:</span> <span class="mi">16</span><span class="p">,</span>
    <span class="cm">/**</span>
<span class="cm">     * Return mouse node.</span>
<span class="cm">     * @method el</span>
<span class="cm">     * @return {HtmlElement}</span>
<span class="cm">     */</span>
    <span class="nx">el</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_el</span><span class="p">;</span>
    <span class="p">},</span>
    <span class="cm">/**</span>
<span class="cm">     * Center the cursor.</span>
<span class="cm">     * @method center</span>
<span class="cm">     */</span>
    <span class="nx">center</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_el</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">left</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">innerWidth</span><span class="o">/</span><span class="mi">2</span> <span class="o">-</span> <span class="k">this</span><span class="p">.</span><span class="nx">WIDTH</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span>
                                <span class="o">+</span> <span class="s1">&#39;px&#39;</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_el</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">top</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">innerHeight</span><span class="o">/</span><span class="mi">2</span> <span class="o">-</span> <span class="k">this</span><span class="p">.</span><span class="nx">HEIGHT</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span>
                                <span class="o">+</span> <span class="s1">&#39;px&#39;</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_onEnd</span><span class="p">.</span><span class="nx">fire</span><span class="p">();</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
    <span class="p">},</span>
    <span class="cm">/**</span>
<span class="cm">     * Click on element.</span>
<span class="cm">     * @method click</span>
<span class="cm">     * @param {Object} cfg</span>
<span class="cm">     * @return {jSim.Mouse}</span>
<span class="cm">     */</span>
    <span class="nx">click</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">cfg</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">cfg</span><span class="p">.</span><span class="nx">el</span> <span class="o">===</span> <span class="s1">&#39;string&#39;</span><span class="p">)</span> 
            <span class="nx">cfg</span><span class="p">.</span><span class="nx">el</span>  <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="nx">cfg</span><span class="p">.</span><span class="nx">el</span><span class="p">);</span>

        <span class="kd">var</span> <span class="nx">pos</span> <span class="o">=</span> <span class="nx">cfg</span><span class="p">.</span><span class="nx">el</span><span class="p">.</span><span class="nx">pos</span><span class="p">();</span>
        <span class="nx">pos</span><span class="p">.</span><span class="nx">x</span> <span class="o">+=</span> <span class="nx">cfg</span><span class="p">.</span><span class="nx">el</span><span class="p">.</span><span class="nx">offsetWidth</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
        <span class="nx">pos</span><span class="p">.</span><span class="nx">y</span> <span class="o">+=</span> <span class="nx">cfg</span><span class="p">.</span><span class="nx">el</span><span class="p">.</span><span class="nx">offsetHeight</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>

        <span class="kd">var</span> <span class="nx">move</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">jSim</span><span class="p">.</span><span class="nx">MoveAnim</span><span class="p">({</span>
            <span class="nx">el</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">el</span><span class="p">(),</span>
            <span class="nx">to</span><span class="o">:</span> <span class="nx">pos</span>
        <span class="p">});</span>

        <span class="kd">var</span> <span class="nx">that</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
        <span class="nx">move</span><span class="p">.</span><span class="nx">onEnd</span><span class="p">({</span>
            <span class="nx">fn</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
                <span class="kd">var</span> <span class="nx">c</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">jSim</span><span class="p">.</span><span class="nx">Click</span><span class="p">({</span><span class="nx">el</span><span class="o">:</span> <span class="nx">cfg</span><span class="p">.</span><span class="nx">el</span><span class="p">});</span>
                <span class="nx">c</span><span class="p">.</span><span class="nx">start</span><span class="p">();</span>
                <span class="nx">that</span><span class="p">.</span><span class="nx">_onEnd</span><span class="p">.</span><span class="nx">fire</span><span class="p">();</span>
            <span class="p">}</span>
        <span class="p">});</span>
        <span class="nx">move</span><span class="p">.</span><span class="nx">start</span><span class="p">();</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
    <span class="p">},</span>
    <span class="cm">/**</span>
<span class="cm">     * Subscribe for the end event.</span>
<span class="cm">     * @method onEnd.</span>
<span class="cm">     * @param {Object} callback</span>
<span class="cm">     */</span>
    <span class="nx">onEnd</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_onEnd</span><span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span><span class="nx">callback</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">};</span>


<span class="cm">/**</span>
<span class="cm"> * Move animation.</span>
<span class="cm"> * @class MoveAnim</span>
<span class="cm"> * @constructor</span>
<span class="cm"> * @param {Object} cfg</span>
<span class="cm"> */</span>
<span class="nx">jSim</span><span class="p">.</span><span class="nx">MoveAnim</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">cfg</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">cfg</span><span class="p">.</span><span class="nx">el</span><span class="p">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;jSim.MoveAnim: node is required&#39;</span><span class="p">);</span>
    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">cfg</span><span class="p">.</span><span class="nx">to</span><span class="p">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span>
                        <span class="s1">&#39;jSim.MoveAnim: destination coordinates are required&#39;</span><span class="p">);</span>
    
    <span class="k">this</span><span class="p">.</span><span class="nx">_el</span> <span class="o">=</span> <span class="nx">cfg</span><span class="p">.</span><span class="nx">el</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">_startX</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">_el</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">left</span><span class="p">.</span><span class="nx">toInt</span><span class="p">();</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">_startY</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">_el</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">top</span><span class="p">.</span><span class="nx">toInt</span><span class="p">();</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">_endX</span> <span class="o">=</span> <span class="nx">cfg</span><span class="p">.</span><span class="nx">to</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">_endY</span> <span class="o">=</span> <span class="nx">cfg</span><span class="p">.</span><span class="nx">to</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span>

    <span class="k">this</span><span class="p">.</span><span class="nx">_signX</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">_signY</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

    <span class="k">this</span><span class="p">.</span><span class="nx">_deltaX</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">_endX</span> <span class="o">-</span> <span class="k">this</span><span class="p">.</span><span class="nx">_startX</span><span class="p">;</span>
    <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_deltaX</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_deltaX</span> <span class="o">*=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_signX</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">this</span><span class="p">.</span><span class="nx">_deltaY</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">_endY</span> <span class="o">-</span> <span class="k">this</span><span class="p">.</span><span class="nx">_startY</span><span class="p">;</span>
    <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_deltaY</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_deltaY</span> <span class="o">*=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_signY</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">this</span><span class="p">.</span><span class="nx">_onEnd</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">jSim</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">Observer</span><span class="p">;</span>
<span class="p">};</span>

<span class="nx">jSim</span><span class="p">.</span><span class="nx">MoveAnim</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">onEnd</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_onEnd</span><span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span><span class="nx">item</span><span class="p">);</span>
    <span class="p">},</span>
    <span class="nx">STEP</span><span class="o">:</span> <span class="mi">4</span><span class="p">,</span>
    <span class="nx">INTERVAL_TIME</span><span class="o">:</span> <span class="mi">20</span><span class="p">,</span>
    <span class="nx">el</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_el</span><span class="p">;</span>
    <span class="p">},</span>
    <span class="cm">/**</span>
<span class="cm">     * Start the animation.</span>
<span class="cm">     * @method start</span>
<span class="cm">     */</span>
    <span class="nx">start</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">counter</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
            <span class="nx">ratio</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">STEP</span> <span class="o">/</span> <span class="k">this</span><span class="p">.</span><span class="nx">_deltaX</span><span class="p">,</span>
            <span class="nx">that</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>

        <span class="k">this</span><span class="p">.</span><span class="nx">_interval</span> <span class="o">=</span> <span class="nx">setInterval</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nx">newX</span> <span class="o">=</span> <span class="nx">that</span><span class="p">.</span><span class="nx">el</span><span class="p">().</span><span class="nx">style</span><span class="p">.</span><span class="nx">left</span><span class="p">.</span><span class="nx">toFloat</span><span class="p">()</span> <span class="o">+</span> <span class="nx">that</span><span class="p">.</span><span class="nx">STEP</span> <span class="o">*</span> <span class="nx">that</span><span class="p">.</span><span class="nx">_signX</span><span class="p">,</span>
                <span class="nx">newY</span> <span class="o">=</span> <span class="nx">that</span><span class="p">.</span><span class="nx">el</span><span class="p">().</span><span class="nx">style</span><span class="p">.</span><span class="nx">top</span><span class="p">.</span><span class="nx">toFloat</span><span class="p">()</span>
                                <span class="o">+</span> <span class="p">(</span><span class="nx">that</span><span class="p">.</span><span class="nx">_deltaY</span> <span class="o">*</span> <span class="nx">ratio</span><span class="p">)</span> <span class="o">*</span> <span class="nx">that</span><span class="p">.</span><span class="nx">_signY</span><span class="p">;</span>
            <span class="k">if</span><span class="p">(</span><span class="nx">that</span><span class="p">.</span><span class="nx">_signX</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">if</span><span class="p">(</span><span class="nx">newX</span> <span class="o">&gt;</span> <span class="nx">that</span><span class="p">.</span><span class="nx">_endX</span><span class="p">)</span> <span class="p">{</span> <span class="nx">newX</span> <span class="o">=</span> <span class="nx">that</span><span class="p">.</span><span class="nx">_endX</span><span class="p">;</span> <span class="p">}</span>
            <span class="p">}</span>
            <span class="k">else</span> <span class="p">{</span> 
                <span class="k">if</span><span class="p">(</span><span class="nx">newX</span> <span class="o">&lt;</span> <span class="nx">that</span><span class="p">.</span><span class="nx">_endX</span><span class="p">)</span> <span class="p">{</span> <span class="nx">newX</span> <span class="o">=</span> <span class="nx">that</span><span class="p">.</span><span class="nx">_endX</span><span class="p">;</span> <span class="p">}</span>
            <span class="p">}</span>

            <span class="k">if</span><span class="p">(</span><span class="nx">that</span><span class="p">.</span><span class="nx">_signY</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">if</span><span class="p">(</span><span class="nx">newY</span> <span class="o">&gt;</span> <span class="nx">that</span><span class="p">.</span><span class="nx">_endY</span><span class="p">)</span> <span class="p">{</span> <span class="nx">newY</span> <span class="o">=</span> <span class="nx">that</span><span class="p">.</span><span class="nx">_endY</span><span class="p">;</span> <span class="p">}</span>
            <span class="p">}</span>
            <span class="k">else</span> <span class="p">{</span>
                <span class="k">if</span><span class="p">(</span><span class="nx">newY</span> <span class="o">&lt;</span> <span class="nx">that</span><span class="p">.</span><span class="nx">_endY</span><span class="p">)</span> <span class="p">{</span> <span class="nx">newY</span> <span class="o">=</span> <span class="nx">that</span><span class="p">.</span><span class="nx">_endY</span><span class="p">;</span> <span class="p">}</span>
            <span class="p">}</span>

            <span class="nx">that</span><span class="p">.</span><span class="nx">el</span><span class="p">().</span><span class="nx">style</span><span class="p">.</span><span class="nx">left</span> <span class="o">=</span> <span class="nx">newX</span> <span class="o">+</span> <span class="s1">&#39;px&#39;</span><span class="p">;</span>
            <span class="nx">that</span><span class="p">.</span><span class="nx">el</span><span class="p">().</span><span class="nx">style</span><span class="p">.</span><span class="nx">top</span> <span class="o">=</span> <span class="nx">newY</span> <span class="o">+</span> <span class="s1">&#39;px&#39;</span><span class="p">;</span>

            <span class="k">if</span><span class="p">(</span><span class="nx">newX</span> <span class="o">==</span> <span class="nx">that</span><span class="p">.</span><span class="nx">_endX</span> <span class="o">&amp;&amp;</span> <span class="nx">newY</span> <span class="o">==</span> <span class="nx">that</span><span class="p">.</span><span class="nx">_endY</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">clearInterval</span><span class="p">(</span><span class="nx">that</span><span class="p">.</span><span class="nx">_interval</span><span class="p">);</span>
                <span class="nx">that</span><span class="p">.</span><span class="nx">_onEnd</span><span class="p">.</span><span class="nx">fire</span><span class="p">()</span>
            <span class="p">}</span>

        <span class="p">},</span> <span class="k">this</span><span class="p">.</span><span class="nx">INTERVAL_TIME</span><span class="p">);</span> 
    <span class="p">},</span>
    <span class="cm">/**</span>
<span class="cm">     * Stop the animation.</span>
<span class="cm">     * @method stop</span>
<span class="cm">     */</span>
    <span class="nx">stop</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">clearInterval</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_interval</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="cm">/**</span>
<span class="cm"> * Class for handling mouse clicks.</span>
<span class="cm"> * @class Click</span>
<span class="cm"> * @constructor</span>
<span class="cm"> * @param {Object} cfg</span>
<span class="cm"> */</span>
<span class="nx">jSim</span><span class="p">.</span><span class="nx">Click</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">cfg</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">cfg</span><span class="p">.</span><span class="nx">el</span><span class="p">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;el node is required&#39;</span><span class="p">);</span>

    <span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">cfg</span><span class="p">.</span><span class="nx">el</span> <span class="o">===</span> <span class="s1">&#39;string&#39;</span><span class="p">)</span> <span class="nx">cfg</span><span class="p">.</span><span class="nx">el</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="nx">cfg</span><span class="p">.</span><span class="nx">el</span><span class="p">);</span>

    <span class="k">this</span><span class="p">.</span><span class="nx">_el</span> <span class="o">=</span> <span class="nx">cfg</span><span class="p">.</span><span class="nx">el</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">_onEnd</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">jSim</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">Observer</span><span class="p">;</span>
<span class="p">};</span>

<span class="nx">jSim</span><span class="p">.</span><span class="nx">Click</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="p">{</span>
    <span class="cm">/**</span>
<span class="cm">     * Invoke mouse click event.</span>
<span class="cm">     * @method start</span>
<span class="cm">     */</span>
    <span class="nx">start</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// https://developer.mozilla.org/en/DOM/event.initMouseEvent</span>
        <span class="kd">var</span> <span class="nx">eventObject</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createEvent</span><span class="p">(</span><span class="s1">&#39;MouseEvents&#39;</span><span class="p">);</span>
        <span class="nx">eventObject</span><span class="p">.</span><span class="nx">initMouseEvent</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span>
            <span class="kc">true</span><span class="p">,</span>
            <span class="kc">true</span><span class="p">,</span>
            <span class="nb">window</span><span class="p">,</span>
            <span class="mi">1</span><span class="p">,</span>
            <span class="mi">0</span><span class="p">,</span>
            <span class="mi">0</span><span class="p">,</span>
            <span class="mi">0</span><span class="p">,</span>
            <span class="mi">0</span><span class="p">,</span>
            <span class="kc">false</span><span class="p">,</span>
            <span class="kc">false</span><span class="p">,</span>
            <span class="kc">false</span><span class="p">,</span>
            <span class="kc">false</span><span class="p">,</span>
            <span class="mi">0</span><span class="p">,</span>
            <span class="kc">null</span>
        <span class="p">);</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_el</span><span class="p">.</span><span class="nx">dispatchEvent</span><span class="p">(</span><span class="nx">eventObject</span><span class="p">);</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_el</span><span class="p">.</span><span class="nx">focus</span><span class="p">();</span> <span class="c1">// TODO</span>
    <span class="p">},</span>
    <span class="cm">/**</span>
<span class="cm">     * Stop mouse click event. Method does nothing but is necessary for Action</span>
<span class="cm">     * interface. </span>
<span class="cm">     * @method stop</span>
<span class="cm">     */</span>
    <span class="nx">stop</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// do nothing.</span>
    <span class="p">},</span>
    <span class="cm">/**</span>
<span class="cm">     * Add callback for end event.</span>
<span class="cm">     * @method onEnd</span>
<span class="cm">     * @param {Object} item</span>
<span class="cm">     */</span>
    <span class="nx">onEnd</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_onEnd</span><span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span><span class="nx">item</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="cm">/**</span>
<span class="cm"> * Typewriter.</span>
<span class="cm"> * @class Typewriter</span>
<span class="cm"> * @constructor</span>
<span class="cm"> */</span>
<span class="nx">jSim</span><span class="p">.</span><span class="nx">Typewriter</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">_onEnd</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">jSim</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">Observer</span><span class="p">;</span>
<span class="p">};</span>

<span class="nx">jSim</span><span class="p">.</span><span class="nx">Typewriter</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">onEnd</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_onEnd</span><span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span><span class="nx">item</span><span class="p">);</span>
    <span class="p">},</span>
    <span class="cm">/**</span>
<span class="cm">     * Stop typing.</span>
<span class="cm">     * @method stop</span>
<span class="cm">     */</span>
    <span class="nx">stop</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">clearInterval</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_interval</span><span class="p">);</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_onEnd</span><span class="p">.</span><span class="nx">fire</span><span class="p">();</span>
    <span class="p">},</span>
    <span class="cm">/**</span>
<span class="cm">     * Start typing.</span>
<span class="cm">     * @method type</span>
<span class="cm">     * @param {Object} cfg</span>
<span class="cm">     */</span>
    <span class="nx">type</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">cfg</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">cfg</span><span class="p">.</span><span class="nx">el</span><span class="p">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Node el is required&#39;</span><span class="p">);</span>
        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">cfg</span><span class="p">.</span><span class="nx">text</span><span class="p">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Text is required&#39;</span><span class="p">);</span>

        <span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">cfg</span><span class="p">.</span><span class="nx">el</span> <span class="o">===</span> <span class="s1">&#39;string&#39;</span><span class="p">)</span>
            <span class="nx">cfg</span><span class="p">.</span><span class="nx">el</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="nx">cfg</span><span class="p">.</span><span class="nx">el</span><span class="p">);</span>

        <span class="kd">var</span> <span class="nx">el</span> <span class="o">=</span> <span class="nx">cfg</span><span class="p">.</span><span class="nx">el</span><span class="p">,</span>
            <span class="nx">text</span> <span class="o">=</span> <span class="nx">cfg</span><span class="p">.</span><span class="nx">text</span><span class="p">,</span>
            <span class="nx">typeInterval</span> <span class="o">=</span> <span class="nx">cfg</span><span class="p">.</span><span class="nx">typeInterval</span> <span class="o">||</span> <span class="mi">300</span><span class="p">,</span>
            <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
            <span class="nx">that</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>

        <span class="nx">el</span><span class="p">.</span><span class="nx">focus</span><span class="p">();</span>

        <span class="k">this</span><span class="p">.</span><span class="nx">_interval</span> <span class="o">=</span> <span class="nx">setInterval</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>

            <span class="k">if</span><span class="p">(</span><span class="nx">i</span> <span class="o">&gt;</span> <span class="nx">text</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">that</span><span class="p">.</span><span class="nx">stop</span><span class="p">();</span>
                <span class="k">return</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="kd">var</span> <span class="nx">eventObject</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createEvent</span><span class="p">(</span><span class="s1">&#39;KeyboardEvent&#39;</span><span class="p">);</span>
            <span class="nx">eventObject</span><span class="p">.</span><span class="nx">initKeyEvent</span><span class="p">(</span><span class="s1">&#39;keydown&#39;</span><span class="p">,</span>
                <span class="kc">true</span><span class="p">,</span>
                <span class="kc">true</span><span class="p">,</span>
                <span class="nb">window</span><span class="p">,</span>
                <span class="kc">false</span><span class="p">,</span>
                <span class="kc">false</span><span class="p">,</span>
                <span class="kc">false</span><span class="p">,</span>
                <span class="kc">false</span><span class="p">,</span>
                <span class="mi">0</span><span class="p">,</span>
                <span class="nx">text</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
            <span class="p">);</span>
            <span class="nx">el</span><span class="p">.</span><span class="nx">dispatchEvent</span><span class="p">(</span><span class="nx">eventObject</span><span class="p">);</span>

            <span class="nx">eventObject</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createEvent</span><span class="p">(</span><span class="s1">&#39;KeyboardEvent&#39;</span><span class="p">);</span>
            <span class="nx">eventObject</span><span class="p">.</span><span class="nx">initKeyEvent</span><span class="p">(</span><span class="s1">&#39;keypress&#39;</span><span class="p">,</span>
                <span class="kc">true</span><span class="p">,</span>
                <span class="kc">true</span><span class="p">,</span>
                <span class="nb">window</span><span class="p">,</span>
                <span class="kc">false</span><span class="p">,</span>
                <span class="kc">false</span><span class="p">,</span>
                <span class="kc">false</span><span class="p">,</span>
                <span class="kc">false</span><span class="p">,</span>
                <span class="mi">0</span><span class="p">,</span>
                <span class="nx">text</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
            <span class="p">);</span>
            <span class="nx">el</span><span class="p">.</span><span class="nx">dispatchEvent</span><span class="p">(</span><span class="nx">eventObject</span><span class="p">);</span>

            <span class="nx">eventObject</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createEvent</span><span class="p">(</span><span class="s1">&#39;KeyboardEvent&#39;</span><span class="p">);</span>
            <span class="nx">eventObject</span><span class="p">.</span><span class="nx">initKeyEvent</span><span class="p">(</span><span class="s1">&#39;keyup&#39;</span><span class="p">,</span>
                <span class="kc">true</span><span class="p">,</span>
                <span class="kc">true</span><span class="p">,</span>
                <span class="nb">window</span><span class="p">,</span>
                <span class="kc">false</span><span class="p">,</span>
                <span class="kc">false</span><span class="p">,</span>
                <span class="kc">false</span><span class="p">,</span>
                <span class="kc">false</span><span class="p">,</span>
                <span class="mi">0</span><span class="p">,</span>
                <span class="nx">text</span><span class="p">[</span><span class="nx">i</span><span class="o">++</span><span class="p">].</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
            <span class="p">);</span>
            <span class="nx">el</span><span class="p">.</span><span class="nx">dispatchEvent</span><span class="p">(</span><span class="nx">eventObject</span><span class="p">);</span>
        <span class="p">},</span> <span class="nx">typeInterval</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">};</span>


<span class="cm">/**</span>
<span class="cm"> * Save all method calls in queue and run next one from the queue in the next</span>
<span class="cm"> * method.</span>
<span class="cm"> * @class LazyDecorator</span>
<span class="cm"> * @constructor</span>
<span class="cm"> * @param {Object} cfg;</span>
<span class="cm"> */</span>
<span class="nx">jSim</span><span class="p">.</span><span class="nx">LazyDecorator</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">cfg</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">_item</span> <span class="o">=</span> <span class="nx">cfg</span><span class="p">.</span><span class="nx">o</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">_methods</span> <span class="o">=</span> <span class="nx">cfg</span><span class="p">.</span><span class="nx">methods</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">_queue</span> <span class="o">=</span> <span class="p">[];</span>

    <span class="kd">var</span> <span class="nx">item</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">_item</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">key</span> <span class="k">in</span> <span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">item</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">===</span> <span class="s1">&#39;function&#39;</span><span class="p">)</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nx">that</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>

            <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_methods</span><span class="p">.</span><span class="nx">exists</span><span class="p">(</span><span class="nx">key</span><span class="p">))</span> <span class="p">{</span>
                <span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">key</span><span class="p">)</span> <span class="p">{</span>
                    <span class="nx">that</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
                        <span class="nx">that</span><span class="p">.</span><span class="nx">_queue</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span>
                            <span class="nx">fn</span><span class="o">:</span> <span class="nx">item</span><span class="p">[</span><span class="nx">key</span><span class="p">],</span>
                            <span class="nx">scope</span><span class="o">:</span> <span class="nx">item</span><span class="p">,</span>
                            <span class="nx">args</span><span class="o">:</span> <span class="nx">arguments</span>
                        <span class="p">});</span>
                        <span class="k">return</span> <span class="nx">that</span><span class="p">;</span> <span class="c1">// fix chaining.</span>
                    <span class="p">};</span>
                <span class="p">}(</span><span class="nx">key</span><span class="p">));</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">key</span><span class="p">)</span> <span class="p">{</span>
                    <span class="nx">that</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
                        <span class="nx">item</span><span class="p">[</span><span class="nx">key</span><span class="p">].</span><span class="nx">apply</span><span class="p">(</span><span class="nx">item</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">);</span>
                        <span class="k">return</span> <span class="nx">that</span><span class="p">;</span> <span class="c1">// fix chaining</span>
                    <span class="p">};</span>
                <span class="p">}(</span><span class="nx">key</span><span class="p">));</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="nx">jSim</span><span class="p">.</span><span class="nx">LazyDecorator</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="p">{</span>
    <span class="cm">/**</span>
<span class="cm">     * Run next method from the queue.</span>
<span class="cm">     * @method next</span>
<span class="cm">     */</span>
    <span class="nx">next</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">o</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">_queue</span><span class="p">.</span><span class="nx">shift</span><span class="p">();</span>
        
        <span class="k">if</span><span class="p">(</span><span class="nx">o</span> <span class="o">===</span> <span class="kc">undefined</span><span class="p">)</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;No more calls in the queue&#39;</span><span class="p">);</span>

        <span class="nx">o</span><span class="p">.</span><span class="nx">fn</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">o</span><span class="p">.</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">o</span><span class="p">.</span><span class="nx">args</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">};</span>
</pre></div>
