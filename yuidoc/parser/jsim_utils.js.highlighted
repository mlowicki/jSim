<div class="highlight"><pre><span class="cm">/**</span>
<span class="cm"> * Utils.</span>
<span class="cm"> * @module utils</span>
<span class="cm"> */</span>


<span class="cm">/**</span>
<span class="cm"> * Utils namespace.</span>
<span class="cm"> * @class Utils</span>
<span class="cm"> * @static</span>
<span class="cm"> */</span>
<span class="nx">jSim</span><span class="p">.</span><span class="nx">Utils</span> <span class="o">=</span> <span class="p">{};</span>


<span class="cm">/**</span>
<span class="cm"> * Observer system. Adding listeners to events and dispatching when event</span>
<span class="cm"> * occurs.</span>
<span class="cm"> * @class Observer</span>
<span class="cm"> * @constructor</span>
<span class="cm"> */</span>
<span class="nx">jSim</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">Observer</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
   <span class="k">this</span><span class="p">.</span><span class="nx">_items</span> <span class="o">=</span> <span class="p">[];</span>
<span class="p">}</span>

<span class="nx">jSim</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">Observer</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="p">{</span>
    <span class="cm">/**</span>
<span class="cm">     * Add new item to the queue.</span>
<span class="cm">     * @method subscribe</span>
<span class="cm">     * @param  {Object} item</span>
<span class="cm">     */</span>
    <span class="nx">subscribe</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">item</span> <span class="o">===</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// reset the queue</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">_items</span><span class="p">.</span><span class="nx">length</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="k">return</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_items</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">item</span><span class="p">);</span>
    <span class="p">},</span>
    <span class="cm">/**</span>
<span class="cm">     * Remove item from the queue.</span>
<span class="cm">     * TODO: Will this be used?</span>
<span class="cm">     * @method unsubscribe</span>
<span class="cm">     * @param {Object} item</span>
<span class="cm">     */</span>
    <span class="nx">unsubscribe</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_items</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">_items</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span>
            <span class="kd">function</span><span class="p">(</span><span class="nx">el</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">if</span><span class="p">(</span><span class="nx">el</span> <span class="o">!==</span> <span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
                    <span class="k">return</span> <span class="nx">el</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">);</span>
    <span class="p">},</span>
    <span class="cm">/**</span>
<span class="cm">     * Invoke all callbacks from the queue.</span>
<span class="cm">     * @method fire</span>
<span class="cm">     */</span>
    <span class="nx">fire</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_items</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span>
            <span class="kd">function</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">item</span><span class="p">.</span><span class="nx">fn</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">item</span><span class="p">.</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">item</span><span class="p">.</span><span class="nx">args</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">);</span>
    <span class="p">}</span>
<span class="p">};</span>


<span class="cm">/**</span>
<span class="cm"> * Interface class.</span>
<span class="cm"> * @class Interface</span>
<span class="cm"> * @constructor</span>
<span class="cm"> * @param {String} name</span>
<span class="cm"> * @param {Array} methods</span>
<span class="cm"> */</span>
<span class="nx">jSim</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">Interface</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">methods</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span> <span class="o">!=</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Interface constructor called with &#39;</span>
            <span class="o">+</span> <span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span> <span class="o">+</span> <span class="s1">&#39;arguments, but expected exactly 2.&#39;</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">this</span><span class="p">.</span><span class="nx">_name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">_methods</span> <span class="o">=</span> <span class="p">[];</span>

    <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">len</span> <span class="o">=</span> <span class="nx">methods</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">len</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">methods</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">!==</span> <span class="s1">&#39;string&#39;</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Interface constructor expects method names to be &#39;</span>
                <span class="o">+</span> <span class="s1">&#39;passed in as a string.&#39;</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_methods</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">methods</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="cm">/**</span>
<span class="cm"> * Check if object implements desired interfaces.</span>
<span class="cm"> * @method ensureImplements</span>
<span class="cm"> * @static</span>
<span class="cm"> * @param {Object} object</span>
<span class="cm"> */</span>
<span class="nx">jSim</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">Interface</span><span class="p">.</span><span class="nx">ensureImplements</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">object</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Function Interface.ensureImplements called with &#39;</span>
            <span class="o">+</span> <span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span> <span class="o">+</span> <span class="s1">&#39;arguments, but expected at least 2.&#39;</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">len</span> <span class="o">=</span> <span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">len</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="kr">interface</span> <span class="o">=</span> <span class="nx">arguments</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
        
        <span class="k">if</span><span class="p">(</span><span class="kr">interface</span><span class="p">.</span><span class="nx">constructor</span> <span class="o">!==</span> <span class="nx">jSim</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">Interface</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Function Interface.ensureImplements expects &#39;</span>
                <span class="o">+</span> <span class="s1">&#39;arguments two and above to be instances of Interface.&#39;</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">mLen</span> <span class="o">=</span> <span class="kr">interface</span><span class="p">.</span><span class="nx">_methods</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="nx">mLen</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nx">method</span> <span class="o">=</span> <span class="kr">interface</span><span class="p">.</span><span class="nx">_methods</span><span class="p">[</span><span class="nx">j</span><span class="p">];</span>

            <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">object</span><span class="p">[</span><span class="nx">method</span><span class="p">]</span> <span class="o">||</span> <span class="k">typeof</span> <span class="nx">object</span><span class="p">[</span><span class="nx">method</span><span class="p">]</span> <span class="o">!==</span> <span class="s1">&#39;function&#39;</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Function Interface.ensureImplements: object &#39;</span>
                  <span class="o">+</span> <span class="s1">&#39;does not implement the &#39;</span> <span class="o">+</span> <span class="kr">interface</span><span class="p">.</span><span class="nx">_name</span>
                  <span class="o">+</span> <span class="s1">&#39; interface. Method &#39;</span> <span class="o">+</span> <span class="nx">method</span> <span class="o">+</span> <span class="s1">&#39; was not found.&#39;</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="nx">jSim</span><span class="p">.</span><span class="nx">Action</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">jSim</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">Interface</span><span class="p">(</span><span class="s1">&#39;Action&#39;</span><span class="p">,</span>
                                    <span class="p">[</span><span class="s1">&#39;next&#39;</span><span class="p">,</span> <span class="s1">&#39;onEnd&#39;</span><span class="p">]);</span>
</pre></div>
